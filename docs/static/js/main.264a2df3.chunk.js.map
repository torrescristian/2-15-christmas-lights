{"version":3,"sources":["components/IntervalSlider/IntervalSlider.jsx","components/Light/Light.jsx","App.jsx","serviceWorker.js","index.js"],"names":["IntervalSlider","onValue","useState","value","setValue","className","htmlFor","id","type","min","max","step","onChange","e","target","Light","on","color","styles","backgroundColor","boxShadow","opacity","style","App","lights","setLights","suspension","setSuspension","run","setRun","useEffect","setTimeout","newLights","map","l","light","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAIO,SAASA,EAAT,GAAsC,IAAZC,EAAW,EAAXA,QAAW,EAChBC,mBAAS,MADO,mBACnCC,EADmC,KAC5BC,EAD4B,KAQ1C,OACE,yBAAKC,UAAU,aACb,2BAAOC,QAAQ,SAASD,UAAU,SAAlC,gBACgBF,EADhB,MAGA,2BACEE,UAAU,SACVE,GAAG,SACHC,KAAK,QACLC,IAAI,MACJC,IAAI,OACJC,KAAK,MACLR,MAAOA,EACPS,SAlBe,SAACC,GACpBT,EAASS,EAAEC,OAAOX,OAClBF,EAAQE,O,MCLL,SAASY,EAAT,GAA+B,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,MACpBC,EAAS,CACbC,gBAAiBF,EACjBG,UAAWJ,EAAE,4BAAwBC,GAAU,QAC/CI,QAASL,EAAK,EAAI,IAGpB,OAAO,yBAAKX,UAAU,QAAQiB,MAAOJ,ICkCxBK,MAvCf,WAAgB,IAAD,EACerB,mBAyCrB,CACL,CACEe,MAAO,SACPD,IAAI,GAEN,CACEC,MAAO,oBACPD,IAAI,GAEN,CACEC,MAAO,SACPD,IAAI,GAEN,CACEC,MAAO,OACPD,IAAI,GAEN,CACEC,MAAO,SACPD,IAAI,GAEN,CACEC,MAAO,SACPD,IAAI,GAEN,CACEC,MAAO,cACPD,IAAI,KArEK,mBACNQ,EADM,KACEC,EADF,OAEuBvB,mBAAS,MAFhC,mBAENwB,EAFM,KAEMC,EAFN,OAGSzB,oBAAS,GAHlB,mBAGN0B,EAHM,KAGDC,EAHC,KAoBb,OAfAC,qBAAU,WACHF,GAILG,YAAW,WACT,IAAMC,EAAYR,EAAOS,KAAI,SAACC,GAAD,sBACxBA,EADwB,CAE3BlB,IAAKkB,EAAElB,QAGTS,EAAUO,KACTN,KACF,CAACF,EAAQE,EAAYE,IAGtB,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,oBACZmB,EAAOS,KAAI,SAACE,EAAOC,GAAR,OACV,kBAAC,EAAD,CAAOC,IAAKD,EAAGnB,MAAOkB,EAAMlB,MAAOD,GAAImB,EAAMnB,SAGjD,kBAAC,EAAD,CAAgBf,QAAS0B,IACzB,4BACEtB,UAAU,SACViB,MAAO,CAAEH,gBAAiBS,EAAM,SAAW,kBAC3CU,QAAS,kBAAMT,GAAQD,KAEtBA,EAAM,OAAS,WC3BJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.264a2df3.chunk.js","sourcesContent":["// @ts-check\nimport React, { useState } from \"react\";\nimport \"./IntervalSlider.css\";\n\nexport function IntervalSlider({ onValue }) {\n  const [value, setValue] = useState(2200);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n    onValue(value);\n  };\n\n  return (\n    <div className=\"container\">\n      <label htmlFor=\"slider\" className=\"label\">\n        Cambiar cada {value}ms\n      </label>\n      <input\n        className=\"slider\"\n        id=\"slider\"\n        type=\"range\"\n        min=\"200\"\n        max=\"2200\"\n        step=\"400\"\n        value={value}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n","// @ts-check\nimport React from \"react\";\nimport \"./Light.css\";\n\nexport function Light({ on, color }) {\n  const styles = {\n    backgroundColor: color,\n    boxShadow: on ? `0px 0px 20px 10px ${color}` : \"unset\",\n    opacity: on ? 1 : 0.5,\n  };\n\n  return <div className=\"light\" style={styles}></div>;\n}\n","// @ts-check\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { IntervalSlider } from \"./components/IntervalSlider/IntervalSlider\";\nimport { Light } from \"./components/Light/Light\";\n\nfunction App() {\n  const [lights, setLights] = useState(initialLights());\n  const [suspension, setSuspension] = useState(2200);\n  const [run, setRun] = useState(false);\n\n  useEffect(() => {\n    if (!run) {\n      return;\n    }\n\n    setTimeout(() => {\n      const newLights = lights.map((l) => ({\n        ...l,\n        on: !l.on,\n      }));\n\n      setLights(newLights);\n    }, suspension);\n  }, [lights, suspension, run]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"lights-container\">\n        {lights.map((light, i) => (\n          <Light key={i} color={light.color} on={light.on} />\n        ))}\n      </div>\n      <IntervalSlider onValue={setSuspension} />\n      <button\n        className=\"button\"\n        style={{ backgroundColor: run ? \"tomato\" : \"mediumseagreen\" }}\n        onClick={() => setRun(!run)}\n      >\n        {run ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n\nfunction initialLights() {\n  return [\n    {\n      color: \"tomato\",\n      on: true,\n    },\n    {\n      color: \"mediumspringgreen\",\n      on: false,\n    },\n    {\n      color: \"yellow\",\n      on: true,\n    },\n    {\n      color: \"blue\",\n      on: false,\n    },\n    {\n      color: \"purple\",\n      on: true,\n    },\n    {\n      color: \"orange\",\n      on: false,\n    },\n    {\n      color: \"deepskyblue\",\n      on: true,\n    },\n  ];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}